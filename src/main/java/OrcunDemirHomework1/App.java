/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package OrcunDemirHomework1;

import java.util.*;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App {
    public static ArrayList<String> search(ArrayList<String> names, Integer minLength, Integer maxLength,
            String search) {
        ArrayList<String> res = new ArrayList<String>();
        for (String str : names) {
            if (str.length() >= minLength && str.length() <= maxLength
                    && str.toLowerCase().indexOf(search.toLowerCase()) != -1) {
                res.add(str);
            }
        }
        return res;
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; // return default port if heroku-port isn't set (i.e. on localhost)
    }

    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        post("/", (req, res) -> {
            String input1 = req.queryParams("input1");
            String input2 = req.queryParams("input2");
            String input3 = req.queryParams("input3");
            String input4 = req.queryParams("input4");
            Map<String, ArrayList> map = new HashMap<String, ArrayList>();
            ArrayList<String> names = new ArrayList<>();
            Scanner scanner = new Scanner(input1);
            while (scanner.hasNext()) {
                names.add(scanner.next());
            }
            scanner.close();
            ArrayList<String> result = null;
            try {
                result = search(names, Integer.parseInt(input2), Integer.parseInt(input3), input4);
            } catch (Exception e) {
                map.put("result", new ArrayList<String>(Arrays.asList("cannot computed.")));
                return new ModelAndView(map, "search.mustache");
            }
            map.put("result", result);
            return new ModelAndView(map, "search.mustache");
        }, new MustacheTemplateEngine());
        get("/", (rq, rs) -> {
            Map<String, String> map = new HashMap<String, String>();
            map.put("result", "not computed yet!");
            return new ModelAndView(map, "search.mustache");
        }, new MustacheTemplateEngine());
    }
}
